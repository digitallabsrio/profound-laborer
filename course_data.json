{
  "course_name": "Grokking the Principles and Practices of Advanced System Design - Learn Interactively",
  "course_overview": "This course teaches you how large, real-world systems are built and operated to meet strict service-level agreements. You’ll learn the many building blocks of a modern system’s design by picking and combining the right pieces and understanding the trade-offs between them.\n\nYou’ll learn about some great systems from hyperscalers such as Google, Facebook, and Amazon. This course has hand-picked seminal work in system design that has stood the test of time and is grounded on strong principles. You will learn all these principles and see them in action in real-world systems.\n\nAfter taking this course, you will be able to solve various system design interview problems. You will have a deeper knowledge of an outage of your favorite app and will be able to understand their event post-mortem reports. This course will set your system design standards so that you can emulate similar success in your endeavors.",
  "course_folder": "grokking the principles and practices of advanced system design",
  "course_lessons": [
    "0-case studies standing on the shoulders of giants",
    "Makefile",
    "1-introduction to distributed file systems",
    "2-introduction to gfs",
    "3-gfs file operations",
    "4-detailed design of gfs",
    "5-workflow of create and read file operations in gfs",
    "6-workflow of write operations in gfs",
    "7-workflow of delete and snapshot operations in gfs",
    "8-relaxed data consistency model",
    "9-dealing with data inconsistencies in gfs",
    "10-metadata consistency model of gfs",
    "11-evaluation of gfs",
    "12-quiz on gfs",
    "13-introduction to colossus",
    "14-design and evaluation of colossus",
    "15-quiz on colossus",
    "16-introduction to tectonic",
    "17-zippydb design",
    "18-detailed design of tectonic",
    "19-multitenancy",
    "19-multitenancy in tectonic",
    "20-tenant specific optimization",
    "20-tenant specific optimization in tectonic",
    "21-empirical evaluation of functional requirements",
    "21-empirical evaluation of tectonic s functional requirements",
    "22-evaluation of tectonic",
    "23-quiz on tectonic",
    "24-introduction to distributed databases",
    "25-introduction to bigtable",
    "26-data model of bigtable",
    "27-detailed design of bigtable part i",
    "28-detailed design of bigtable part ii",
    "29-design refinements in bigtable",
    "30-evaluation of bigtable",
    "31-quiz on bigtable",
    "32-introduction to megastore",
    "33-high level design for better availability and scalability",
    "34-data model of megastore",
    "35-replication in megastore",
    "36-evaluation of megastore",
    "37-quiz on megastore",
    "38-introduction to spanner",
    "39-detailed design of spanner",
    "40-database buckets and data model of spanner",
    "41-truetime api in spanner",
    "42-spanner truetime and the cap theorem",
    "43-concurrency control in spanner",
    "44-database operations in spanner",
    "45-evaluation of spanner",
    "46-quiz on spanner",
    "47-introduction to key value stores",
    "48-motivation and requirements for a many core approach",
    "49-estimations and limitations of a many core system",
    "50-detailed design of a many core system",
    "51-evaluation of the many core system",
    "52-quiz on many core systems",
    "53-introduction to scaling memcache",
    "54-single server level of memcache",
    "55-cluster level of memcache",
    "56-regional level of memcache",
    "57-cross regional level of memcache",
    "58-evaluation of memcache",
    "59-quiz on memcache",
    "60-introduction to silt",
    "61-high level design of silt",
    "62-a write friendly store for silt part i",
    "63-a write friendly store for silt part ii",
    "64-a write friendly store for silt part iii",
    "65-intermediary store s in silt",
    "66-a memory efficient store for silt part i",
    "67-a memory efficient store for silt part ii",
    "68-a memory efficient store for silt part iii",
    "69-request flows in silt",
    "70-evaluating and extending the design of silt",
    "71-quiz on silt",
    "72-introduction to dynamodb",
    "72-introduction to dynamodb defining the design problem",
    "73-high level design of dynamodb",
    "74-no fixed schema in dynamodb",
    "75-partitioning and replication in dynamodb",
    "76-adapting to traffic patterns in dynamodb",
    "77-durability and correctness in dynamodb",
    "78-ensuring high availability in dynamodb",
    "79-quiz on dynamodb",
    "80-introduction to concurrency management",
    "81-introduction to two phase locking 2pl",
    "82-analysis and evaluation of two phase locking 2pl",
    "83-quiz on 2pl",
    "84-introduction to chubby",
    "85-detailed design of chubby part i",
    "86-detailed design of chubby part ii",
    "87-detailed design of chubby part iii",
    "88-detailed design of chubby part iv",
    "89-the rationale behind chubbys design",
    "90-evaluation of chubby",
    "91-quiz on chubby",
    "92-introduction to zookeeper",
    "93-detailed design of zookeeper",
    "94-primitives of zookeeper",
    "95-evaluation of zookeeper",
    "96-quiz on zookeeper",
    "97-introduction to big data processing systems",
    "98-system design mapreduce",
    "99-high level design of mapreduce",
    "100-mapreduce detailed design",
    "101-design refinements in mapreduce part i",
    "101-mapreduce refinements i",
    "102-design refinements in mapreduce part ii",
    "103-mapreduce evaluation",
    "104-concluding mapreduce",
    "104-mapreduce conclusion",
    "105-quiz on mapreduce",
    "106-introduction to spark",
    "107-requirements of spark",
    "108-high level design of spark",
    "109-resilient distributed datasets of spark",
    "110-parallel operations in spark",
    "111-shared variables in spark",
    "112-detailed design of spark",
    "113-refinements in spark",
    "114-evaluation of spark",
    "115-quiz on spark",
    "116-introduction to kafka",
    "117-high level design of kafka",
    "118-detailed design of kafka",
    "118-kafka detailed design",
    "119-efficiency of kafka",
    "120-distributed coordination in kafka",
    "121-delivery guarantees of kafka",
    "121-kafka delivery guarantees",
    "122-evaluation of kafka",
    "122-kafka evaluation",
    "123-quiz on kafka",
    "124-introduction to consensus in distributed systems",
    "125-consensus prerequisites and two generals problem",
    "126-flp impossibility",
    "127-the byzantine generals problem",
    "128-quiz on consensus fundamentals",
    "129-introduction to two phase commit 2pc",
    "130-working of the two phase commit protocol",
    "131-failures in the two phase commit protocol",
    "132-quiz on two phase commit",
    "133-introduction to state machine replication",
    "134-state machines",
    "135-replication and coordination of state machines",
    "136-ordering requests part i",
    "137-ordering requests part ii",
    "138-fault tolerance for outputs and clients",
    "139-protocols for maintaining fault tolerance part i",
    "140-protocols for maintaining fault tolerance part ii",
    "141-smr in practice via a log",
    "142-quiz on state machine replication",
    "143-introduction to paxos",
    "144-basic paxos protocol design",
    "145-basic paxos in action",
    "146-the rationale behind paxos design choices",
    "147-multi paxos",
    "148-quiz on paxos",
    "149-introduction to raft",
    "150-raft s basics and high level workflow",
    "151-raft s leader election protocol",
    "152-raft s log replication protocol",
    "153-raft s safety fault tolerance and availability protocols",
    "154-raft s cluster membership changes",
    "155-log compaction and client interaction in raft",
    "156-quiz on raft",
    "157-conclusion"
  ],
  "repo_name": "profound-laborer"
}
